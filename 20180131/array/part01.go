package main

import "fmt"

/*
Go 语言数组
Go 语言提供了数组类型的数据结构。
数组是具有相同唯一类型的一组已编号且长度固定的数据项序列，这种类型可以是任意的原始类型例如整形、字符串或者自定义类型。
相对于去声明number0, number1, ..., and number99的变量，使用数组形式numbers[0], numbers[1] ..., numbers[99]更加方便且易于扩展。
数组元素可以通过索引（位置）来读取（或者修改），索引从0开始，第一个元素索引为 0，第二个索引为 1，以此类推。

声明数组
Go 语言数组声明需要指定元素类型及元素个数，语法格式如下：
var variable_name [SIZE] variable_type
以上为一维数组的定义方式。数组长度必须是整数且大于 0。例如以下定义了数组 balance 长度为 10 类型为 float32：
var balance [10]float32

初始化数组
以下演示了数组初始化：
var balance [5]float32{1.1,2.2,3.3,4.4,5.5}
初始化数组中 {} 中的元素个数不能大于 [] 中的数字。
如果忽略 [] 中的数字不设置数组大小，Go 语言会根据元素的个数来设置数组的大小：
var balance []float32{1.2,2.5,3.5,3.6,4.4,5.9}
该实例与上面的实例是一样的，虽然没有设置数组的大小。
balance[4] = 50.0
以上实例读取了第五个元素。数组元素可以通过索引（位置）来读取（或者修改），索引从0开始，第一个元素索引为 0，第二个索引为 1，以此类推。

访问数组元素
数组元素可以通过索引（位置）来读取。格式为数组名后加中括号，中1括号中为索引的值。例如：
float32 apple = balance[0]
 */
func main() {

	//nums是一个长度为10的数组
	var nums [10]int

	for i := 0; i < 10; i++ {
		nums[i] = i + 100
	}

	for i := 0; i < len(nums); i++ {
		fmt.Println(nums[i])
	}

}
