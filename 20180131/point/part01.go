package main

import "fmt"

/*
Go 语言指针
Go 语言中指针是很容易学习的，Go 语言中使用指针可以更简单的执行一些任务。
我们都知道，变量是一种使用方便的占位符，用于引用计算机内存地址。
Go 语言的取地址符是 &，放到一个变量前使用就会返回相应变量的内存地址。

什么是指针
一个指针变量可以指向任何一个值的内存地址它指向那个值的内存地址。
类似于变量和常量，在使用指针前你需要声明指针。指针声明格式如下：
var var_name *var-type
var-type 为指针类型，var_name 为指针变量名，* 号用于指定变量是作为一个指针。以下是有效的指针声明：
var ip = *int //指向整型
var if = *float32 //指向浮点型

如何使用指针
指针使用流程：
#1 定义指针变量。
#2 为指针变量赋值。
#3 访问指针变量中指向地址的值。
在指针类型前面加上 * 号（前缀）来获取指针所指向的内容。
 */
func main() {

	var a = 10
	fmt.Println("a的内存地址是：", &a)

	//声明一个实际变量
	var b int = 20
	//声明一个指针变量
	var ip *int

	//指针变量的存储地址
	ip = &b

	fmt.Println("b的变量地址是：", &b)

	//指针变量的存储地址
	fmt.Println("指针变量的存储地址：", ip)

	//使用指针访问值
	fmt.Println("ip 变量的值：", *ip)

	//a的内存地址是： 0xc42001a0d8
	//b的变量地址是： 0xc42001a0f0
	//指针变量的存储地址： 0xc42001a0f0
	//ip 变量的值： 20

}
